练习3.1:使用恰当的using声明重做1.4.1节(第11页)和2.6.2节(第67页)的练习。
答：把cin和cout替换一下就行。

练习3.2:编写一段程序从标准输入中一次读取一整行，然后修改该程序使其一次读入一个词。
答：
#include<iostream>
#include<string>
using namespace std;
int main()
{
 string line;
 while(getline(cin,line))
  cout << line << endl;
 //string word;
 //while(cin >> word)
 // cout << word << " ";
 //cout << endl;
 return 0;
}

练习3.3:请说明string类的输入运算符和getline函数分别是如何处理空白字符的。
答：
string类的输入运算符：string对象会自动忽略开头的空白(即空格符、换行符、制表符等)，并从第一个真正的字符开始读起，直到遇见下一个空白为止。
getline函数：从给定的输入流中读入内容，直到遇到换行符为止(注意换行符也被读进来了)，然后把所读的内容存到那个string对象中去(注意不存换行符)。getline只要一遇到换行符就结束读取操作并返回结果，哪怕输入的一开始就是换行符也是如此。如果输入真的一开始就是换行符，那么所得的结果是个空string。

练习3.4:编写一个程序读入两个字符串，比较其是否相等并输出结果。如果不想等，输出较大的那个字符串。改写上述程序，比较输入的两个字符串是否等长，如果不等长，输出长度较大的那个字符串。
答：

#include<iostream>
#include<string>
using namespace std;
int main()
{
 string str1,str2;
 cout << "Please enter two strings:" << endl;
 cin >> str1 >> str2;
 if(str1 == str2)
  cout << "str1 is equal to str2." << endl;
 else
  {
   cout << "the bigger one is：";
   if(str1 > str2)
    cout << str1 << endl;
   else
    cout << str2 << endl;
  }

/*
*  if(str1.size() == str2.size())
*   cout << "the two string has the same size." << endl;
*  else
*  {
*   cout << "the longer one is：";
*   if(str1.size() > str2.size())
*    cout << str1 << endl;
*   else
*    cout << str2 << endl;
*  }
*/
 return 0;
}

练习3.5:编写一段程序从标准输入中读入多个字符串并将它们连接在一起，输出连接成的大字符串。然后修改上述程序，用空格把输入的多个字符串分隔开来。
答：

#include<iostream>
#include<string>
using namespace std;
int main()
{
 string str1, str2;
 while(cin >> str1)
//  str2 += str1;
  str2 += str1 + " ";
 cout << str2 << endl;
 return 0;
}

练习3.6:编写一段程序，使用范围for语句将字符串内得所有字符用X代替。
答：
#include<iostream>
using namespace std;
int main()
{
 string str("some string");
 for(auto &c : str)
  if(!isspace(c))
   c = 'X';
 cout << str << endl;
 return 0;
}

练习3.7:就上一题完成得程序而言，如果将循环控制变量得类型设为char，将会发生什么？先估计一下结果，然后实际编程进行验证。
答：输出结果还是原字符串“some string”。

练习3.8:分别用while循环和传统得for循环重写第一题得程序，你觉得哪种形式更好呢？为什么？
答：
#include<iostream>
using namespace std;
int main()
{
 string str("some string");
 decltype(str.size()) index = 0;
 while(str[index])
  {
   if(!isspace(str[index]))
    str[index] = 'X';
   ++index;
  }
 cout << str << endl;
 return 0;
}

#include<iostream>
using namespace std;
int main()
{
 string str("some string");
 for(decltype(str.size()) index = 0;
     index < str.size();++index)
  if(!isspace(str[index]))
   str[index] = 'X';
 cout << str << endl;
 return 0;
}

范围for不用考虑字符串得范围，所以更简洁，使用起来更方便。

练习3.9:下面得程序有何作用？它合法吗？如何不合法，为什么？
string s;
cout << s[0] << endl;
答：不合法。s被默认初始化为空字符串，使用下标访问空string会引发不可预知的结果。但是C++标准并不要求标准库检测下标是否合法。在我的编译环境中输出空。

练习3.10:编写一段程序，读入一个包含标点符号的字符串，将标点符号去除后输出字符串剩余的部分。
答：
#include<iostream>
using namespace std;
int main()
{
 string str1,str2;
 cout << "Please enter a string:" << endl;
 while(getline(cin,str1))
  for(auto &c : str1)
  if(!ispunct(c))
   str2 += c;
 cout << str2 << endl;
 return 0;
}

练习3.11:下面的范围for语句合法吗？如果合法，c得类型是什么？
const string s = "Keep out!";
for(auto &c : s) { /*……*/ }
答：不合法，如果合法，则可以给c赋值从而改变string的值，但是string是const，所以是非法的。但是我的编译环境并没有报错，也没有给出警告。

练习3.12:下列vector对象的定义有不正确的吗？如果有，请指出来。对于正确的，描述其执行结果;对于不正确的，说明其错误原因。
(a)vector<vector<int>> ivec;
(b)vector<string> svec = ivec;
(c)vector<string> svec(10,"null");
答：
(a)正确，定义一个类型为vector<vector<int>>的变量。
(b)错误，两个vector对象的类型不相同。
(c)正确，svec有10个值为"null"的元素。

练习3.13:下列的vector对象各包含多少个元素？这些元素的值分别是什么？
(a)vector<int> v1;
(b)vector<int> v2(10);
(c)vector<int> v3(10,42);
(d)vector<int> v4{10};
(e)vector<int> v5{10,42};
(f)vector<string> v6{10};
(g)vector<string> v7{10,"hi"};
答：
(a)0个元素。
(b)10个元素，每个元素的值都为0。
(c)10个元素，每个元素的值都为42。
(d)1个元素，值为10.
(e)2个元素，每个元素的值都为42.
(f)10个元素，每个元素的值都为空。
(g)10个元素，每个元素的值都为"hi"。

练习3.14:编写一段程序，用cin读入一组整数并把它们存入一个vector对象。
答：
#include<iostream>
#include<vector>
using namespace std;
int main()
{
 vector<int> ivec;
 int num;
 while(cin >> num)
  ivec.push_back(num);
 return 0;
}

练习3.15:改写上题的程序，不过这次读入的是字符串。
答：
#include<iostream>
#include<vector>
#include<string>
using namespace std;
int main()
{
 vector<string> svec;
 string str;
 while(cin >> str)
  svec.push_back(str);
 return 0;
}

练习3.16:编写程序，把练习3.13中vector对象的容量和具体内容输出出来。检查你之前的回答是否正确，如果不对，回头重新学习3.3.1节(第87页)直到弄明白错在何处为止。
答：
用v1举例，其他类似。
cout << v1.size() << endl;
for(auto i : v1)
 cout << i << endl;

练习3.17:从cin读入一组词并把它们存入一个vector对象，然后设法把所有词都该写为大写形式。输出改变后的结果，每个词占一行。
答：
#include<iostream>
#include<vector>
#include<string>
using namespace std;
int main()
{
 vector<string> svec;
 string str;
 while(cin >> str)
  svec.push_back(str);
 for(auto &st : svec)
 {
  for(auto &s : st)
   s = toupper(s);
  cout << st << endl;
 }
 return 0;
}

练习3.18:下面得程序合法吗？如果不合法，你准备如何修改？
vector<int> ivec;
ivec[0] = 42;
答：不合法。试图用下标访问一个不存在的元素，但是在编译时不会给出任何提示，在运行时会出现错误“段错误 (核心已转储)“。修改为：
vector<int> ivec;
ivec.push_back(42);

练习3.19:如果想定义一个含有10个元素的vector对象，所有元素的值都是42,请列举出三种不同的实现方法。哪种方法更好呢？为什么？
答：
(a)vector<int> ivec = {42,42,42,42,42,42,42,42,42,42};
(b)vector<int> ivec(10,42);
(c)vector<int> ivec;
   for(int i = 1;i <= 10;++i)
    ivec.push_back(42);
对此题而言，第二种方法更好。

练习3.20:读入一组整数并把它们存入一个vector对象，将每对相邻整数的和输出出来。改写你的程序，这次要求先输出第1个和最后1个元素的和，接着输出第2个和倒数第2个元素的和，以此类推。
答：
#include<iostream>
#include<vector>
#include<string>
using namespace std;
int main()
{
 vector<int> ivec;
 int num;
 while(cin >> num)
  ivec.push_back(num);
 if(ivec.size() % 2)
  {
   for(int i = 0;i < ivec.size()-2;i += 2)
    cout << ivec[i] + ivec[i+1] << endl;
   cout << ivec[ivec.size()-1] << endl;
  }
 else
  {
   for(int i = 0;i < ivec.size();i += 2)
   cout << ivec[i] + ivec[i+1] << endl;
  }
 return 0;
}

#include<iostream>
#include<vector>
#include<string>
using namespace std;
int main()
{
 vector<int> ivec;
 int num;
 while(cin >> num)
  ivec.push_back(num);
 if(ivec.size() % 2)
  {
   for(int i = 0;i < ivec.size()/2;++i)
    cout << ivec[i] + ivec[ivec.size()-1-i] << endl;
   cout << ivec[ivec.size()/2] << endl;
  }
 else
  {
   for(int i = 0;i < ivec.size();i += 2)
    cout << ivec[i] + ivec[ivec.size()-1-i] << endl;
  }
 return 0;
}

